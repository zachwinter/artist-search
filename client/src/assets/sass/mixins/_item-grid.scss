@mixin omega-reset($nth) {
	&:nth-child(#{$nth})   { margin-right: flex-gutter(); }
	&:nth-child(#{$nth}+1) { clear: none }
}

@mixin item-grid($gridmap) {
	padding: 0;
	list-style-type: none;

	@if type-of($gridmap) == number { 
		li {
			@include span-columns($grid-columns/$gridmap);
			@include omega($gridmap * 1n); 
			margin-bottom: flex-gutter();
		}
	} 

	@if type-of($gridmap) == list {		
		$init: nth($gridmap, 1);
		@each $breakpoint in $gridmap {
			$this: index($gridmap, $breakpoint);
			@if $this == 1 {
				li {
					@include span-columns($grid-columns/$init);
					@include omega($init * 1n); 
					margin-bottom: flex-gutter();
				}
			}  
			@if $this > 1 {
				$col: nth($breakpoint, 2); 
				li {
					@include bp(nth($breakpoint, 1)){	
						@if $this == 2 { @include omega-reset($init * 1n); }
						@if $this >= 3 {
							$last: nth(nth($gridmap, ($this - 1)), 2);
							@include omega-reset($last * 1n);
						}  
						@include span-columns($grid-columns/$col);
						@include omega($col * 1n); 
					}
				}
			}
		}
	}

	li {
		padding: 0;
		list-style-type: none;

		&:before { content: ''; }
	}
}